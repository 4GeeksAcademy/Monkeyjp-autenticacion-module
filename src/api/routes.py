# ¬øQu√© son las variables de entorno?
# Son valores que se cargan en la memoria de la app al arrancar.
# No est√°n ‚Äúhardcodeados‚Äù en el c√≥digo ‚Üí eso evita exponer informaci√≥n sensible en GitHub.


# Hash de contrase√±as üîë
# ‚ùì ¬øQu√© es un hash?
# Un hash es una transformaci√≥n matem√°tica de un texto (como una contrase√±a) a una cadena irreconocible.
# No se puede revertir f√°cilmente (no se puede obtener la contrase√±a original a partir del hash).

# ¬øPor qu√© usamos hash para las contrase√±as?
# Nunca guardamos contrase√±as en texto plano en la base de datos (ser√≠a inseguro).
# Si alguien hackea la base de datos, ver√≠a solo hashes.
# Cuando un usuario se loguea, tomamos la contrase√±a que ingres√≥, la hasheamos y la comparamos con el hash guardado.

# JWT (JSON Web Token) ü™ô
# ‚ùì ¬øQu√© es un JWT?
# Es un token (una cadena de texto √∫nica) que representa la sesi√≥n de un usuario autenticado.
# Est√° compuesto por 3 partes codificadas en base64:
# Header ‚Üí informaci√≥n del algoritmo.
# Payload ‚Üí informaci√≥n del usuario (ej: su id o email).
# Signature ‚Üí validaci√≥n para comprobar que no fue alterado.

# ¬øC√≥mo funciona?
# Usuario hace login con email y password.
# Si las credenciales son correctas, el servidor genera un JWT y se lo devuelve al cliente.
# El cliente guarda el JWT (normalmente en localStorage).
# Cada vez que hace una petici√≥n privada, env√≠a el JWT en el header Authorization.
# El backend valida el token ‚Üí si es v√°lido, permite el acceso; si no, devuelve 401 Unauthorized.

# ¬øPor qu√© implementamos esto en nuestras apps?
# Seguridad: los usuarios solo acceden a lo que les corresponde.
# Escalabilidad: el backend no necesita guardar sesiones en memoria (JWT es ‚Äústateless‚Äù).
# Buenas pr√°cticas: cualquier app real (red social, e-commerce, etc.) necesita autenticaci√≥n.

# INSTALACIONES NECESARIAS
# pipenv install flask-bcrypt
# Documentacion: https://flask-bcrypt.readthedocs.io/en/1.0.1/
# pipenv install flask-jwt-extended
# Documentacion: https://flask-jwt-extended.readthedocs.io/en/stable/index.html


"""
This module takes care of starting the API Server, Loading the DB and Adding the endpoints
"""
from flask import Flask, request, jsonify, url_for, Blueprint
from api.models import db, User
from api.utils import generate_sitemap, APIException
from flask_cors import CORS
from flask_jwt_extended import create_access_token
from flask_jwt_extended import get_jwt_identity
from flask_jwt_extended import jwt_required


from sqlalchemy.exc import IntegrityError

api = Blueprint('api', __name__)

# Allow CORS requests to this API
CORS(api)


@api.route('/hello', methods=['POST', 'GET'])
def handle_hello():

    response_body = {
        "message": "Hello! I'm a message that came from the backend, check the network tab on the google inspector and you will see the GET request"
    }

    return jsonify(response_body), 200


@api.route('/signup', methods=['POST'])
def signup():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    if not email or not password:
        return jsonify({"msg": "Email and password are required"}), 400

    existing_user = db.session.execute(db.select(User).where(
        User.email == email)).scalar_one_or_none()
    if existing_user:
        return jsonify({"msg": "User with this email already exists"}), 409

    new_user = User(email=email)
    new_user.set_password(password)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({"msg": "User created successfully"}), 201


@api.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data.get('email')
    password = data.get('password')

    if not email or not password:
        return jsonify({"msg": "Email and password are required"}), 400

    user = db.session.execute(db.select(User).where(
        User.email == email)).scalar_one_or_none()

    if user is None:
        return jsonify({"msg": "Invalid email or password"}), 401

    if user.check_password(password):
        access_token = create_access_token(identity=str(user.id))
        return jsonify({"msg": "Login successful", "token": access_token}), 200
    else:
        return jsonify({"msg": "Invalid email or password"}), 401


@api.route('/profile', methods=["GET"])
@jwt_required()
# ¬øQu√© hace?
# Indica que esa ruta solo puede usarse si el usuario tiene un JWT v√°lido.
# Si no se env√≠a el token, o si est√° mal/expirado ‚Üí Flask devuelve autom√°ticamente 401 Unauthorized.
def get_profile():
    user_id = get_jwt_identity()
    user = db.session.get(User, int(user_id))

    if not user:
        return jsonify({"msg": "User not found"}), 404

    return jsonify(user.serialize()), 200
